
###
### Otras
###

### Ruta a disco toshiba
export TOBA="/media/$USER/OUDIN"
export TOBB="$TOBA/RESPALDOS"

### pup desde golang
export GOPATH=$HOME/gocode


## added by Anaconda3 installer
source $HOME/.anaconda3/etc/profile.d/conda.sh  # commented out by conda initialize
  # export PATH="$PATH:$HOME/.anaconda3/bin"
# source ~/.anaconda3/etc/profile.d/conda.sh  # commented out by conda initialize
#$HOME/.anaconda3/bin:\

#### look & feel para Java
#### /etc/environment
#### export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'

# java home
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
# apache maven
M2_HOME='/opt/maven'

# path
# /opt/Qt5.14.2/5.14.2/gcc_64/bin:\
# $HOME/gocode/bin:\
export PATH=\
/root/.local/bin:\
$M2_HOME/bin:\
$HOME/.bin:\
/usr/local/sbin:\
/usr/sbin:\
/opt/boost:\
/opt/caffe/bin:\
/opt/opencv/bin:\
/opt/gephi/bin:\
/opt/drakon:\
/usr/local/go/bin:\
$PATH

# /opt/unity3d/Editor:\
# /opt/ibm/db2/V11.1/bin:\
# /opt/ibm/db2/V11.1/instance:\
# /usr/lib/libreoffice/program:\
# /opt/gradle/gradle-4.4/bin
# /opt/intel/intelpython2/bin:\
# /opt/intel/intelpython3/bin

# /opt/Qt5.14.2/5.14.2/gcc_64/lib:\
# $HOME/Downloads/Linux/sistema/qt_opensource/fbsenv/lib/python3.5/site-packages/PyQt5/Qt/plugins/platforms:\
export LD_LIBRARY_PATH=\
/usr/local/lib:\
/usr/lib:\
/usr/lib/x86_64-linux-gnu:\
/opt/qxmledit:\
/usr/local/lib/x86_64-linux-gnu:\
/usr/lib/libreoffice/program:\
$LD_LIBRARY_PATH

# export QT_QPA_PLATFORM_PLUGIN_PATH=\
# /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms:\
# /opt/Qt5.14.2/5.14.2/gcc_64/plugins/platforms:\
# /opt/Qt5.14.2/Tools/QtCreator/lib/Qt/plugins/platforms

#/opt/intel/compilers_and_libraries_2018.0.128/linux/mkl/lib/intel64_lin:\
#/opt/intel/compilers_and_libraries_2018.0.128/linux/mkl/lib:\
#/opt/intel/compilers_and_libraries_2018/linux/lib:\
#/opt/intel/compilers_and_libraries/linux/lib:\
#/opt/intel/lib:\
#/opt/intel:\
#/opt/firefox21.x86
#$LD_LIBRARY_PATH

# setup libgtkflow
#export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu
export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0/

export DYLD_LIBRARY_PATH=\
$HOME/git.repos/caffe/build/lib:\
$HOME/git.repos/caffe/.build_release/lib

# export PYTHONHOME=\
# /opt/intel/intelpython2

export CAFFE_ROOT=\
/opt/caffe

# intel library
# source /opt/intel/compilers_and_libraries_2018.0.128/linux/bin/compilervars.sh -arch intel64 -platform linux
# source /opt/intel/compilers_and_libraries_2018.0.128/linux/mkl/bin/mklvars.sh intel64
# source /opt/intel/compilers_and_libraries_2018.0.128/linux/bin/iccvars.sh intel64

# spark
export PYTHONPATH="$SPARK_HOME/python:$SPARK_HOME/python/build:$SPARK_HOME/python/lib/py4j-0.10.9.7-src.zip:$PYTHONPATH"

# unset PYTHONPATH
# unset PYTHONPATH

# export PYTHONPATH=\
# $CAFFE_ROOT/python:\
# /opt/intel/intelpython2/lib/python2.7/site-packages:\
# $PYTHONPATH

# ### pyenv para vim 8.1
# export PATH="$HOME/.pyenv/bin:$PATH"
# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

  # desactivar system bell
  if [ -n "$DISPLAY" ]; then
    xset b off
  fi

### LD_LIBRARY_PATH
# export LD_LIBRARY_PATH=\

### gnu make
export MAKE="make -j1"
export MAKEFLAGS='-j1'

# npm-global
export PATH=~/.npm-global/bin:$PATH

### spark
export SPARK_HOME=/opt/spark
export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin
export PYSPARK_PYTHON=/usr/bin/python3

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('$HOME/.anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "$HOME/.anaconda3/etc/profile.d/conda.sh" ]; then
#         . "$HOME/.anaconda3/etc/profile.d/conda.sh"  # commented out by conda initialize
#     else
#         export PATH="$HOME/.anaconda3/bin:$PATH"  # commented out by conda initialize
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<


export PATH=$HOME/.local/bin:$PATH

### var entorno docker
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
# export DOCKER_HOST=unix://var/run/docker.sock

complete -C /usr/bin/terraform terraform

# tabtab source for electron-forge package
# uninstall by removing these lines or running `tabtab uninstall electron-forge`
[ -f /home/matqud/Downloads/Linux/vis/shiny-electron/r-shiny-electron/node_modules/tabtab/.completions/electron-forge.bash ] && . /home/matqud/Downloads/Linux/vis/shiny-electron/r-shiny-electron/node_modules/tabtab/.completions/electron-forge.bash
# Run something, muting output or redirecting it to the debug stream
# depending on the value of _ARC_DEBUG.
# If ARGCOMPLETE_USE_TEMPFILES is set, use tempfiles for IPC.
__python_argcomplete_run() {
    if [[ -z "${ARGCOMPLETE_USE_TEMPFILES-}" ]]; then
        __python_argcomplete_run_inner "$@"
        return
    fi
    local tmpfile="$(mktemp)"
    _ARGCOMPLETE_STDOUT_FILENAME="$tmpfile" __python_argcomplete_run_inner "$@"
    local code=$?
    cat "$tmpfile"
    rm "$tmpfile"
    return $code
}

__python_argcomplete_run_inner() {
    if [[ -z "${_ARC_DEBUG-}" ]]; then
        "$@" 8>&1 9>&2 1>/dev/null 2>&1
    else
        "$@" 8>&1 9>&2 1>&9 2>&1
    fi
}

_python_argcomplete() {
    local IFS=$'\013'
    local SUPPRESS_SPACE=0
    if compopt +o nospace 2> /dev/null; then
        SUPPRESS_SPACE=1
    fi
    COMPREPLY=( $(IFS="$IFS" \
                  COMP_LINE="$COMP_LINE" \
                  COMP_POINT="$COMP_POINT" \
                  COMP_TYPE="$COMP_TYPE" \
                  _ARGCOMPLETE_COMP_WORDBREAKS="$COMP_WORDBREAKS" \
                  _ARGCOMPLETE=1 \
                  _ARGCOMPLETE_SUPPRESS_SPACE=$SUPPRESS_SPACE \
                  __python_argcomplete_run "$1") )
    if [[ $? != 0 ]]; then
        unset COMPREPLY
    elif [[ $SUPPRESS_SPACE == 1 ]] && [[ "${COMPREPLY-}" =~ [=/:]$ ]]; then
        compopt -o nospace
    fi
}
complete -o nospace -o default -o bashdefault -F _python_argcomplete airflow

##THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
#export SDKMAN_DIR="$HOME/.sdkman"
#[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
#. "$HOME/.cargo/env"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

